@page
@model DocumentationModel

<div id="docs" class="main-container">
    <div class="main-section">
        <div class="main-header">
            <h2>Documentation</h2>
        </div>
        <nav class="toc-block" aria-label="Table of Contents">
            <h3>Table of Contents</h3>
            <ul>
                <li><a href="/Documentation#overview" class="toc-link">Overview</a></li>
                <li><a href="/Documentation#installing-packages" class="toc-link">Installing Packages</a></li>
                <li><a href="/Documentation#server-side-configuration" class="toc-link">Server-side Configuration</a></li>
                <li><a href="/Documentation#registering-dependencies" class="toc-link">Registering Dependencies</a></li>
                <li><a href="/Documentation#server-side-api" class="toc-link">Server-side API</a></li>
                <li><a href="/Documentation#client-side-integration" class="toc-link">Client-side Integration</a></li>
                <li><a href="/Documentation#persistent-data-stores" class="toc-link">Persistent Data Stores</a></li>
                <li><a href="/Documentation#extension-points" class="toc-link">Extension Points</a></li>
            </ul>
        </nav>
        <div class="main-description">
            <h3 id="overview">Overview</h3>
            <p>
                Shark WebAuthn is a .NET library that provides a server-side implementation of the WebAuthn standard, enabling secure passwordless and multi-factor authentication (MFA) for web applications. It supports key WebAuthn operations, such as <b>public key credential registration</b> and <b>authentication</b>, ensuring compliance with the <a href="https://www.w3.org/TR/webauthn-2/" target="_blank" class="resource-link external">WebAuthn Level 2 specification</a>.
            </p>
            <p>The library is written in .NET 8, making it suitable for modern ASP.NET Core applications and environments. The library itself is focused solely on the WebAuthn protocol layer &ndash; handling attestation, assertion, metadata validation, and related cryptography. It doesn't aim to replace a full identity framework such as ASP.NET Identity.</p>
            <p>
                Shark WebAuthn exposes high-level APIs for both registration and authentication flows:
                <ul>
                    <li><code>BeginRegistration</code> and <code>CompleteRegistration</code> generate <code>PublicKeyCredentialCreationOptions</code> and process the attestation response during public key credential registration.</li>
                    <li><code>BeginAuthentication</code> and <code>CompleteAuthentication</code> generate <code>PublicKeyCredentialRequestOptions</code> and validate the assertion response during authentication.</li>
                </ul>
            </p>
            <p>These APIs enable integration with the browser's Web Authentication API while ensuring standards-compliant and secure public key credential handling. More information about the Web Authentication API is available on the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API" target="_blank" class="resource-link external">MDN Web Docs</a> site.</p>
            <h4 id="about-docs">About This Documentation</h4>
            <p>
                This documentation provides comprehensive guidance for integrating and using the Shark WebAuthn .NET library to implement passwordless and multi-factor authentication in ASP.NET Core web applications. It covers server-side configuration, API usage, persistent data storage options, and provides sample client-side integration. Please note that session management and client-side code are not part of the library itself and are offered only as sample references to assist with implementation.
            </p>
            <h4 id="license">License</h4>
            <p>
                Shark WebAuthn is fully open source, with every component freely available on <a href="https://github.com/linuxchata/fido2" target="_blank" class="resource-link external">GitHub</a> under the permissive <a href="https://github.com/linuxchata/fido2/blob/main/LICENSE" target="_blank" class="resource-link external">BSD 3-Clause License</a>.
            </p>
        </div>
        <div class="main-description">
            <h3 id="installing-packages">Installing Packages</h3>
            <p>
                To begin integrating Shark WebAuthn into your ASP.NET Core application, add the following NuGet packages to your project:
            </p>
            <pre class="code"><code class="language-bash">dotnet add package Shark.Fido2.Core
dotnet add package Shark.Fido2.Models
dotnet add package Shark.Fido2.InMemory
</code></pre>
            <p>
                These packages provide the core WebAuthn functionality, data models, and an in-memory credential repository for development and testing. For production, consider using a persistent credential store instead of the in-memory implementation. See the <a href="/Documentation#persistent-data-stores" class="resource-link">Persistent Data Stores</a> section for details on integrating with Microsoft SQL Server and Amazon DynamoDB.
            </p>
        </div>
        <div class="main-description">
            <h3 id="server-side-configuration">Server-side Configuration</h3>
            <p>
                Shark WebAuthn .NET library requires specific configuration to operate as a WebAuthn relying party. Configuration is typically provided via the <code>Fido2Configuration</code> section in your application's configuration files (e.g., <code>appsettings.json</code>, <code>appsettings.Production.json</code>). This section details all available configuration options, their default values, and their intended usage.
            </p>
            <h4 id="configuration-schema">Configuration Schema</h4>
            <p>The following is an example of the server-side configuration.</p>
            <pre class="code"><code class="language-json">{
  "Fido2Configuration": {
    "RelyingPartyId": "example.com", // Use 'localhost' for local development
    "RelyingPartyIdName": "Example Corporation",
    "Origins": [ "https://example.com" ], // Use '[ "localhost" ]' for local development
    "Timeout": 60000,
    "AlgorithmsSet": "Extended",
    "AllowNoneAttestation": true,
    "AllowSelfAttestation": true,
    "EnableTrustedExecutionEnvironmentOnly": false,
    "EnableMetadataService": true,
    "EnableStrictAuthenticatorVerification": false,
    "MetadataServiceConfiguration": {
      "MetadataBlobLocation": "https://mds3.fidoalliance.org/",
      "RootCertificateLocationUrl": "https://secure.globalsign.com/cacert/root-r3.crt",
      "MaximumTokenSizeInBytes": 8388608
    }
  }
}
</code></pre>
            <p>A minimal server-side configuration example is shown below.</p>
            <pre class="code"><code class="language-json">{
  "Fido2Configuration": {
    "RelyingPartyId": "example.com", // Use 'localhost' for local development
    "RelyingPartyIdName": "Example Corporation",
    "Origins": [ "https://example.com" ] // Use '[ "localhost" ]' for local development
  }
}
</code></pre>
            <h4 id="property-reference">Property Reference</h4>
            <p>Core Configuration</p>
            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th>Option</th>
                        <th>Default</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr><td><code>RelyingPartyId</code></td><td></td><td>Valid domain string identifying the Relying Party on whose behalf a given registration or authentication ceremony is being performed. This is a critical parameter in the WebAuthn protocol. It defines the security scope within which credentials are valid. Therefore, careful selection is essential, as an incorrect or overly broad value can lead to unintended credential reuse or security vulnerabilities.</td></tr>
                    <tr><td><code>RelyingPartyIdName</code></td><td></td><td>Human-palatable identifier for the Relying Party, intended only for display.</td></tr>
                    <tr><td><code>Origins</code></td><td></td><td>List of the fully qualified origins of the Relying Party making the request, passed to the authenticator by the browser.</td></tr>
                    <tr><td><code>Timeout</code></td><td><code>60000</code></td><td>Time, in milliseconds, that the Relying Party is willing to wait for the call to complete.</td></tr>
                    <tr><td><code>AlgorithmsSet</code></td><td><code>Extended</code></td><td>Set of the supported cryptographic algorithms. Possible values are <code>Required</code>, <code>Recommended</code> or <code>Extended</code>. More information about the cryptographic algorithms is available on the <a href="https://fidoalliance.org/specs/fido-v2.0-rd-20180702/fido-server-v2.0-rd-20180702.html#other" target="_blank" class="resource-link external">fidoalliance.org</a> site.</td></tr>
                    <tr><td><code>AllowNoneAttestation</code></td><td><code>true</code></td><td>Value indicating whether None attestation type is acceptable under Relying Party policy. <a href="https://www.w3.org/TR/webauthn-2/#none" target="_blank" class="resource-link external">None attestation</a> is used when the authenticator doesn't have any attestation information available.</td></tr>
                    <tr><td><code>AllowSelfAttestation</code></td><td><code>true</code></td><td>Value indicating whether Self attestation type is acceptable under Relying Party policy. <a href="https://www.w3.org/TR/webauthn-2/#self-attestation" target="_blank" class="resource-link external">Self attestation</a> is used when the authenticator doesn't have a dedicated attestation key pair or a vendor-issued certificate.</td></tr>
                    <tr><td><code>EnableTrustedExecutionEnvironmentOnly</code></td><td><code>true</code></td><td>Value indicating whether the Relying Party trusts only keys that are securely generated and stored in a Trusted Execution Environment (Android Key Attestation).</td></tr>
                    <tr><td><code>EnableMetadataService</code></td><td><code>true</code></td><td>Value indicating whether the Relying Party uses the FIDO Metadata Service to verify the attestation object. Metadata from the FIDO Metadata Service is stored in an in-memory cache and remains valid until the <code>nextUpdate</code> timestamp, which is received from the metadata BLOB and indicates the latest time a new metadata BLOB may be provided.</td></tr>
                    <tr><td><code>EnableStrictAuthenticatorVerification</code></td><td><code>false</code></td><td>Value indicating whether the Relying Party requires strict verification of authenticators. If enabled, missing metadata for the authenticator would cause attestation to fail. This parameter is ignored if the FIDO Metadata Service is disabled.</td></tr>
                </tbody>
            </table>
            <p>FIDO Metadata Service Configuration</p>
            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th>Option</th>
                        <th>Default</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr><td><code>MetadataBlobLocation</code></td><td><code>https://mds3.fidoalliance.org/</code></td><td>Location of the centralized and trusted source of information about FIDO authenticators (Metadata Service BLOB).</td></tr>
                    <tr><td><code>RootCertificateLocationUrl</code></td><td><code>https://secure.globalsign.com/cacert/root-r3.crt</code></td><td>Location of GlobalSign Root R3 for Metadata Service BLOB.</td></tr>
                    <tr><td><code>MaximumTokenSizeInBytes</code></td><td><code>8388608</code></td><td>Maximum token size in bytes that will be processed. This configuration is related to the Metadata Service BLOB size.</td></tr>
                </tbody>
            </table>
            <h4 id="configuration-usage">Configuration Usage</h4>
            <p>
                Add the <code>Fido2Configuration</code> section to your <code>appsettings.json</code> or environment-specific configuration file.
            </p>
            <h4 id="best-practices">Best Practices</h4>
            <ul>
                <li>Setting <code>EnableMetadataService</code> to <code>true</code> is recommended in production environments to ensure authenticators are validated against the FIDO Metadata Service.</li>
            </ul>
            <h4 id="troubleshooting">Troubleshooting</h4>
            <ul>
                <li>If authentication fails with an "origin" error, verify that the <code>Origins</code> array matches the actual origin of your frontend application.</li>
                <li>If using the FIDO Metadata Service, ensure your application can reach the URLs specified in <code>MetadataServiceConfiguration</code>.</li>
            </ul>
        </div>
        <div class="main-description">
            <h3 id="registering-dependencies">Registering Dependencies</h3>
            <p>
                To register the Shark WebAuthn services in your ASP.NET Core application, add the following registrations to your <code>Program.cs</code> file:
            </p>
            <pre class="code"><code class="language-csharp">var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllers();

// Other service registrations

builder.Services.AddFido2(builder.Configuration);
builder.Services.AddFido2InMemoryStore();

var app = builder.Build();

// Configure the HTTP request pipelines

// HTTP request pipelines

app.UseStaticFiles();

// Other HTTP request pipelines

app.MapControllers();

await app.RunAsync();
</code></pre>
            <p>
                <code>AddFido2(builder.Configuration)</code> registers the core Shark WebAuthn services using your application's configuration. <code>AddFido2InMemoryStore()</code> registers an in-memory credential repository, suitable for development and testing. For production, consider using a persistent credential store instead of the in-memory implementation.
            </p>
        </div>
        <div class="main-description">
            <h3 id="server-side-api">Server-side API</h3>
            <p>
                To enable WebAuthn functionality, your application requires REST API controllers to handle core WebAuthn operations: credential registration (attestation) and authentication (assertion). These controllers expose endpoints for frontend interaction with the WebAuthn flows.
            </p>
            <h4 id="attestation-registration">Attestation (Registration)</h4>
            <p>The Attestation controller handles the registration ceremony.</p>
            <p>
                1. <b>Create the <code>AttestationController</code> and inject an instance of the <code>IAttestation</code> interface into its constructor</b>
            </p>
            <pre class="code"><code class="language-csharp">[Route("[controller]")]
[ApiController]
public class AttestationController : ControllerBase
{
    private readonly IAttestation _attestation;

    public AttestationController(IAttestation attestation)
    {
        _attestation = attestation;
    }

    // Endpoints for attestation operations
}
</code></pre>
            <p>
                2. <b>Add endpoint to get create credential options</b>
            </p>
            <pre class="code"><code class="language-csharp">[HttpPost("options")]
public async Task&lt;IActionResult&gt; Options(ServerPublicKeyCredentialCreationOptionsRequest request, CancellationToken cancellationToken)
{
    var createOptions = await _attestation.BeginRegistration(request.Map(), cancellationToken);
    HttpContext.Session.SetString("CreateOptions", JsonSerializer.Serialize(createOptions));
    return Ok(createOptions.Map());
}
</code></pre>
            <p>
                3. <b>Add endpoint to create credential</b>
            <p>
                <pre class="code"><code class="language-csharp">[HttpPost("result")]
public async Task&lt;IActionResult&gt; Result(ServerPublicKeyCredentialAttestation request, CancellationToken cancellationToken)
{
    var createOptionsString = HttpContext.Session.GetString("CreateOptions");
    var createOptions = JsonSerializer.Deserialize&lt;PublicKeyCredentialCreationOptions&gt;(createOptionsString!);
    await _attestation.CompleteRegistration(request.Map(), createOptions!, cancellationToken);
    return Ok(ServerResponse.Create());
}
</code></pre>
                <h4 id="assertion-authentication">Assertion (Authentication)</h4>
            <p>The Assertion controller handles the authentication ceremony.</p>
            <p>
                1. <b>Create the <code>AssertionController</code> and inject an instance of the <code>IAssertion</code> interface into its constructor</b>
            </p>
            <pre class="code"><code class="language-csharp">[Route("[controller]")]
[ApiController]
public class AssertionController : ControllerBase
{
    private readonly IAssertion _assertion;

    public AssertionController(IAssertion assertion)
    {
        _assertion = assertion;
    }

    // Endpoints for assertion operations
}
</code></pre>
            <p>
                2. <b>Add endpoint to get request credential options</b>
            </p>
            <pre class="code"><code class="language-csharp">[HttpPost("options")]
public async Task&lt;IActionResult&gt; Options(ServerPublicKeyCredentialGetOptionsRequest request, CancellationToken cancellationToken)
{
    var requestOptions = await _assertion.BeginAuthentication(request.Map(), cancellationToken);
    HttpContext.Session.SetString("RequestOptions", JsonSerializer.Serialize(requestOptions));
    return Ok(requestOptions.Map());
}
</code></pre>
            <p>
                3. <b>Add endpoint to validate credential</b>
            </p>
            <pre class="code"><code class="language-csharp">[HttpPost("result")]
public async Task&lt;IActionResult&gt; Result(ServerPublicKeyCredentialAssertion request, CancellationToken cancellationToken)
{
    var requestOptionsString = HttpContext.Session.GetString("RequestOptions");
    var requestOptions = JsonSerializer.Deserialize&lt;PublicKeyCredentialRequestOptions&gt;(requestOptionsString!);
    await _assertion.CompleteAuthentication(request.Map(), requestOptions!, cancellationToken);
    return Ok(ServerResponse.Create());
}
</code></pre>
            <p>
                <b>Important:</b> These controller examples use session state to store options between requests. To enable session support in your application, ensure that <code>Program.cs</code> includes calls to <code>AddSession</code> and <code>UseSession</code>:
            </p>
            <pre class="code"><code class="language-csharp">var builder = WebApplication.CreateBuilder(args);

builder.Services.AddSession();

// Other service registrations

var app = builder.Build();

app.UseSession();

// Other HTTP request pipelines
</code></pre>
            <p>
                While the default in-memory session state is sufficient for development and testing, it is recommended to use a distributed cache (such as Redis) in production environments.
            </p>
        </div>
        <div class="main-description">
            <h3 id="client-side-integration">Client-side Integration</h3>
            <p>
                To finalize the implementation, you must incorporate JavaScript code that interacts with the browser's Web Authentication API. This API manages the client-side authentication process. Please note that JavaScript files must be placed in the <code>wwwroot/js</code> folder so the server can serve them as static assets.
            </p>
            <p>
                1. <b>Add the <code>attestation.js</code> file containing the <code>navigator.credentials.create()</code> invocation</b>
            </p>
            <p>
                The following is a minimal sample of JavaScript code for creating discoverable credentials using the Web Authentication API in the browser. This code demonstrates the basic flow for communicating with the server-side REST API endpoints described above. <b>Important:</b> This example does not include production-level safeguards for simplicity. For real-world applications, you should add proper error handling and input validation.
            </p>
            <details>
                <summary>Click to expand</summary>
                <pre class="code"><code class="language-js">async function registration(username, displayName) {
    const optionsRequest = {
        username: username,
        displayName: displayName,
        attestation: 'direct',
        authenticatorSelection: {
            residentKey: 'required',
            userVerification: 'required',
            requireResidentKey: true
        }
    };
    const options = await fetchAttestationOptions(optionsRequest);
    await createCredential(options);
}

async function createCredential(options) {
    const credentialCreationOptions = {
        publicKey: {
            rp: {
                id: options.rp.id,
                name: options.rp.name,
            },
            user: {
                id: toUint8Array(options.user.id),
                name: options.user.name,
                displayName: options.user.displayName,
            },
            pubKeyCredParams: options.pubKeyCredParams.map(param => ({
                type: param.type,
                alg: param.alg,
            })),
            authenticatorSelection: options.authenticatorSelection,
            challenge: toUint8Array(options.challenge),
            excludeCredentials: options.excludeCredentials.map(credential => ({
                id: toUint8Array(credential.id),
                transports: credential.transports,
                type: credential.type,
            })),
            timeout: options.timeout,
            attestation: options.attestation
        },
    };

    let attestation = await navigator.credentials.create(credentialCreationOptions);
    const credentials = {
        id: attestation.id,
        rawId: toBase64Url(attestation.rawId),
        response: {
            attestationObject: toBase64Url(attestation.response.attestationObject),
            clientDataJson: toBase64Url(attestation.response.clientDataJSON),
            transports: attestation.response.getTransports(),
        },
        type: attestation.type,
    };

    await fetchAttestationResult(credentials);

    window.alert('User was registered');
}

async function fetchAttestationOptions(optionsRequest) {
    const response = await fetch('/attestation/options/', {
        method: 'POST',
        headers: {
            'content-type': 'application/json'
        },
        body: JSON.stringify(optionsRequest)
    });
    if (response.ok) {
        return await response.json();
    }
}

async function fetchAttestationResult(credentials) {
    const response = await fetch('/attestation/result/', {
        method: 'POST',
        headers: {
            'content-type': 'application/json'
        },
        body: JSON.stringify(credentials)
    });
}

window.registration = registration;
</code></pre>
            </details>
            <p>
                2. <b>Add the <code>assertion.js</code> file containing the <code>navigator.credentials.get()</code> invocation</b>
            </p>
            <p>
                The following is a minimal sample of JavaScript code for performing authentication with discoverable credentials using the Web Authentication API in the browser. <b>Important:</b> This example does not include production-level safeguards for simplicity. For real-world applications, you should add proper error handling and input validation.
            </p>
            <details>
                <summary>Click to expand</summary>
                <pre class="code"><code class="language-js">async function authentication() {
    const optionsRequest = {};
    const options = await fetchAssertionOptions(optionsRequest);
    await requestCredential(options);
}

async function requestCredential(options) {
    const credentialRequestOptions = {
        publicKey: {
            rpId: options.rpId,
            challenge: toUint8Array(options.challenge),
            allowCredentials: [],
            timeout: options.timeout
        },
    };

    let assertion = await navigator.credentials.get(credentialRequestOptions);
    const credentials = {
        id: assertion.id,
        rawId: toBase64Url(assertion.rawId),
        response: {
            authenticatorData: toBase64Url(assertion.response.authenticatorData),
            clientDataJson: toBase64Url(assertion.response.clientDataJSON),
            signature: toBase64Url(assertion.response.signature),
            userHandle: toBase64Url(assertion.response.userHandle),
        },
        type: assertion.type,
    };

    await fetchAssertionResult(credentials);

    window.alert('User was authenticated');
}

async function fetchAssertionOptions(optionsRequest) {
    const response = await fetch('/assertion/options/', {
        method: 'POST',
        headers: {
            'content-type': 'application/json'
        },
        body: JSON.stringify(optionsRequest)
    });
    if (response.ok) {
        return await response.json();
    }
}

async function fetchAssertionResult(credentials) {
    const response = await fetch('/assertion/result/', {
        method: 'POST',
        headers: {
            'content-type': 'application/json'
        },
        body: JSON.stringify(credentials)
    });
}

window.authentication = authentication;
</code></pre>
            </details>
            <p>
                This JavaScript code bridges the browser's Web Authentication API with the server-side REST API endpoints provided by the ASP.NET Core controllers described above.
            </p>
            <p>Please note that the new static methods <a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential/parseCreationOptionsFromJSON_static" target="_blank" class="resource-link external">parseCreationOptionsFromJSON()</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential/parseRequestOptionsFromJSON_static" target="_blank" class="resource-link external">parseRequestOptionsFromJSON()</a>, and the instance method <a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential/toJSON" target="_blank" class="resource-link external">toJSON()</a> can be used to parse options received from the server or serialize credentials. Using these methods simplifies data exchange with the server, so the utility functions for conversions described below are not necessary. However, these methods might not work in older devices or browsers.</p>
            <p>
                3. <b>Add utilities functions</b>
            </p>
            <p>
                Add <a href="https://github.com/linuxchata/fido2/blob/main/src/Shark.Fido2.Sample/wwwroot/js/utilities.js" target="_blank" class="resource-link external">utility functions</a> to convert between Base64URL strings and Uint8Array byte arrays, ensuring proper encoding and decoding for binary data used in web authentication operations.
            </p>
            <p>
                4. <b>Add HTML markup</b>
            </p>
            <p>
                Add the HTML markup to support credential registration and authentication. Refer to the sample <a href="https://github.com/linuxchata/fido2/blob/main/src/Shark.Fido2.Sample/Pages/Index.cshtml" target="_blank" class="resource-link external">Index.cshtml</a> file for an example.
            </p>
            <p>
                5. <b>Add JavaScript logic for the site</b>
            </p>
            <p>
                Add JavaScript logic to connect the HTML markup with credential registration and authentication functionality. Refer to the sample <a href="https://github.com/linuxchata/fido2/blob/main/src/Shark.Fido2.Sample/wwwroot/js/site.js" target="_blank" class="resource-link external">site.js</a> file for an example.
            </p>
            <p>
                6. <b>Reference JavaScript files</b>
            </p>
            <p>
                Reference JavaScript files in <code>_Layout.cshtml</code>.
            </p>
            <pre class="code"><code class="language-js">&lt;script src="~/js/attestation.js" asp-append-version="true"&gt;&lt;/script&gt;
&lt;script src="~/js/assertion.js" asp-append-version="true"&gt;&lt;/script&gt;
&lt;script src="~/js/utilities.js" asp-append-version="true"&gt;&lt;/script&gt;
&lt;script src="~/js/site.js" asp-append-version="true"&gt;&lt;/script&gt;
</code></pre>
            <p>
                7. <b>Run the ASP.NET Core application over HTTPS</b>
            </p>
            <h4 id="browsers-support">Browsers Support</h4>
            <p>Up-to-date details regarding the Web Authentication API support across modern browsers can be found on <a href="https://caniuse.com/webauthn" target="_blank" class="resource-link external">Can I use</a> page.</p>
        </div>
        <div class="main-description">
            <h3 id="persistent-data-stores">Persistent Data Stores</h3>
            <p>
                For production environments, you should use a persistent credential store instead of the in-memory implementation. Shark WebAuthn provides support for various database providers.
            </p>
            <h4 id="sql-server">Microsoft SQL Server</h4>
            <p>
                To use Microsoft SQL Server as your credential store, follow these steps:
            </p>
            <p>
                1. <b>Database Setup</b>
            </p>
            <p>
                Create the necessary database table by executing the SQL table creation script available at <a href="https://github.com/linuxchata/fido2/blob/main/scripts/sqlserver/sqlserver_table_creation.sql" target="_blank" class="resource-link external">SQL Server Table Creation Script</a>.
            </p>
            <p>
                2. <b>Installing Package</b>
            </p>
            <p>Add the following NuGet packages to your project:</p>
            <pre class="code"><code class="language-bash">dotnet add package Shark.Fido2.SqlServer
</code></pre>
            <p>
                3. <b>Registering Dependencies</b>
            </p>
            <p>
                Replace the in-memory store registration with Microsoft SQL Server in your <code>Program.cs</code>:
            </p>
            <pre class="code"><code class="language-csharp">var builder = WebApplication.CreateBuilder(args);

// Other service registrations

builder.Services.AddFido2(builder.Configuration);
builder.Services.AddFido2SqlServer();
</code></pre>
            <p>
                4. <b>Configuration</b>
            </p>
            <p>
                Add the connection string to your <code>appsettings.json</code> or environment-specific configuration file:
            </p>
            <pre class="code"><code class="language-json">{
  "ConnectionStrings": {
    "DefaultConnection": "Server=SQL_SERVER_INSTANCE;Database=DATABASE_NAME;OTHER_PARAMETERS;"
  }
}
</code></pre>
            <h4 id="amazon-dynamodb">Amazon DynamoDB</h4>
            <p>
                To use Amazon DynamoDB as your credential store, follow these steps:
            </p>
            <p>
                1. <b>Table Setup</b>
            </p>
            <p>
                Create the Amazon DynamoDB table with the following parameters:
            </p>
            <ul>
                <li>Table name: <code>Credential</code></li>
                <li>Partition key: <code>cid</code> (<code>Binary</code>)</li>
                <li>Sort key: N/A</li>
                <li>
                    Global secondary index name: <code>UserNameIndex</code>
                    <ul>
                        <li>Partition key: <code>un</code> (<code>String</code>)</li>
                        <li>Projected properties: INCLUDE: <code>cid</code>, <code>tsp</code></li>
                    </ul>
                </li>
            </ul>
            <p>
                Ensure your AWS credentials have the following permissions to access the <code>Credential</code> table.
            </p>
            <p>Actions</p>
            <ul>
                <li><code>dynamodb:GetItem</code></li>
                <li><code>dynamodb:Query</code></li>
                <li><code>dynamodb:PutItem</code></li>
                <li><code>dynamodb:UpdateItem</code></li>
            </ul>
            <p>Resources</p>
            <ul>
                <li><code>arn:aws:dynamodb:AWS_REGION:AWS_ACCOUNT_ID:table/Credential</code></li>
                <li><code>arn:aws:dynamodb:AWS_REGION:AWS_ACCOUNT_ID:table/Credential/index/UserNameIndex</code></li>
            </ul>
            <p>
                2. <b>Installing Package</b>
            </p>
            <p>Add the following NuGet packages to your project:</p>
            <pre class="code"><code class="language-bash">dotnet add package Shark.Fido2.DynamoDB
</code></pre>
            <p>
                3. <b>Registering Dependencies</b>
            </p>
            <p>
                Replace the in-memory store registration with Amazon DynamoDB in your <code>Program.cs</code>:
            </p>
            <pre class="code"><code class="language-csharp">var builder = WebApplication.CreateBuilder(args);

// Other service registrations

builder.Services.AddFido2(builder.Configuration);
builder.Services.AddFido2DynamoDB();
</code></pre>
            <p>
                4. <b>Configuration</b>
            </p>
            <p>
                Add the following Amazon DynamoDB configuration to your <code>appsettings.json</code> or environment-specific configuration file:
            </p>
            <pre class="code"><code class="language-json">{
  "AmazonDynamoDbConfiguration": {
    "AwsRegion": "eu-central-1",
    "ConnectTimeoutInSeconds": 10,
    "MaxErrorRetry": 3,
    "AccessKey": "",
    "SecretKey": ""
  }
}
</code></pre>
            <h4 id="custom-implementation">Custom Implementation</h4>
            <p>
                If your application uses a database provider that is not yet supported out of the box, you can create a custom persistent credential store by implementing the <code>ICredentialRepository</code> interface.
            </p>
            <p>
                1. <b>Implementing the Interface</b>
            </p>
            <p>
                Create a new class that implements the <code>ICredentialRepository</code> interface from the <code>Shark.Fido2.Core.Abstractions.Repositories</code> namespace. This interface defines the contract required for storing and retrieving credentials.
            </p>
            <p>
                2. <b>Registering Your Implementation</b>
            </p>
            <p>
                Register your custom repository with the dependency injection container in <code>Program.cs</code>:
            </p>
<pre class="code"><code class="language-csharp">var builder = WebApplication.CreateBuilder(args);

// Other service registrations

builder.Services.AddFido2(builder.Configuration);
builder.Services.AddScoped&lt;ICredentialRepository, CustomCredentialRepository&gt;();
</code></pre>
            <p>
                3. <b>Configuration</b>
            </p>
            <p>
                Add your custom store settings to <code>appsettings.json</code> or environment-specific configuration file, and bind it as needed in your class using <code>IConfiguration</code>.
            </p>
        </div>
        <div class="main-description">
            <h3 id="extension-points">Extension Points</h3>
            <p>
                Shark WebAuthn .NET library allows you to replace certain functionalities with custom implementations. This extensibility enables you to tailor the WebAuthn behavior to your specific requirements.
            </p>
            <h4 id="challenge-generator">Cryptographic Challenge Generator</h4>
            <p>
                The most notable example is the <code>IChallengeGenerator</code> interface, which represents the logic to generate cryptographic challenges used in WebAuthn operations.
            </p>
            <p>
                To provide a custom logic for cryptographic challenge generation, implement the interface:
            </p>
            <pre class="code"><code class="language-csharp">public sealed class CustomChallengeGenerator : IChallengeGenerator
{
    public byte[] Get()
    {
        Span&lt;byte&gt; challengeSpan = stackalloc byte[37];
        RandomNumberGenerator.Fill(challengeSpan);
        return challengeSpan.ToArray();
    }
}
</code></pre>
            <p>
                Then replace the default implementation in the dependency injection container:
            </p>
            <pre class="code"><code class="language-csharp">builder.Services.AddFido2(builder.Configuration);
builder.Services.AddFido2InMemoryStore();
builder.Services.AddTransient&lt;IChallengeGenerator, CustomChallengeGenerator&gt;();
</code></pre>
            <p>
                Another example of an extension point is the <code>IUserIdGenerator</code> interface, which is responsible for generating user identifiers.
            </p>
        </div>
    </div>
</div>